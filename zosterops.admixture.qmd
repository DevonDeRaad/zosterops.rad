---
title: "*Zosterops* ADMIXTURE runs"
format: html
toc: true
toc-title: Document Contents
number-sections: true
embed-resources: true
---

```{r, results='hide'}
library(vcfR)
library(SNPfiltR)
library(ggplot2)
library(RColorBrewer)
```

### Filter input SNP files based on smaple inclusion and MAC to increase signal to noise ratio
```{r}
#read in filtered vcf
vcfR <- read.vcfR("~/Desktop/cali.zosterops.rad/filtered.unlinked.snps.vcf.gz")
vcfR
#bring in sample info
#read in sample info csv
sample.info<-read.csv("~/Desktop/cali.zosterops.rad/zosterops.trimmed.RAD.sampling.csv")
sample.info<-sample.info[sample.info$ID %in% colnames(vcfR@gt),]
table(sample.info$Species)
#see sample order
colnames(vcfR@gt)

#remove singletons
vcf.2<-min_mac(vcfR, min.mac = 2)
#vcfR::write.vcf(vcf.2, file="~/Desktop/cali.zosterops.rad/nosingletons.vcf.gz")
vcf.2
```

### Code to convert the vcf into appropriate file structure and run ADMIXTURE on the cluster
```{bash, eval=FALSE}
#!/bin/sh
#
#SBATCH --job-name=admixture.zost              # Job Name
#SBATCH --nodes=1             # 40 nodes
#SBATCH --ntasks-per-node=5               # 40 CPU allocation per Task
#SBATCH --partition=sixhour            # Name of the Slurm partition used
#SBATCH --chdir=/home/d669d153/work/zosterops.rad/admixture/all.samps    # Set working d$
#SBATCH --mem-per-cpu=1gb            # memory requested
#SBATCH --time=200
#use plink to convert vcf directly to bed format:
/home/d669d153/work/plink --vcf /home/d669d153/work/zosterops.rad/admixture/all.samps/filtered.unlinked.snps.vcf  --double-id --allow-extra-chr --make-bed --out binary_fileset
#fix chromosome names
cut -f2- binary_fileset.bim  > temp
awk 'BEGIN{FS=OFS="\t"}{print value 1 OFS $0}' temp > binary_fileset.bim
rm temp
#run admixture for a K of 1-10, using cross-validation, with 10 threads
for K in 1 2 3 4 5 6 7 8 9 10; 
do /home/d669d153/work/admixture_linux-1.3.0/admixture --cv -j5 -m EM binary_fileset.bed $K | tee log${K}.out;
done
#Which K iteration is optimal according to ADMIXTURE ?
grep -h CV log*.out > log.errors.txt
```

### Repeat in a separate directory with singletons removed
```{bash, eval=FALSE}
#!/bin/sh
#
#SBATCH --job-name=admixture.zost              # Job Name
#SBATCH --nodes=1             # 40 nodes
#SBATCH --ntasks-per-node=5               # 40 CPU allocation per Task
#SBATCH --partition=sixhour            # Name of the Slurm partition used
#SBATCH --chdir=/home/d669d153/work/zosterops.rad/admixture/mac2    # Set working d$
#SBATCH --mem-per-cpu=1gb            # memory requested
#SBATCH --time=200
#use plink to convert vcf directly to bed format:
/home/d669d153/work/plink --vcf /home/d669d153/work/zosterops.rad/admixture/mac2/nosingletons.vcf  --double-id --allow-extra-chr --make-bed --out binary_fileset
#fix chromosome names
cut -f2- binary_fileset.bim  > temp
awk 'BEGIN{FS=OFS="\t"}{print value 1 OFS $0}' temp > binary_fileset.bim
rm temp
#run admixture for a K of 1-10, using cross-validation, with 10 threads
for K in 1 2 3 4 5 6 7 8 9 10; 
do /home/d669d153/work/admixture_linux-1.3.0/admixture --cv -j5 -m EM binary_fileset.bed $K | tee log${K}.out;
done
#Which K iteration is optimal according to ADMIXTURE ?
grep -h CV log*.out > log.errors.txt
```

### check out the run with all samples included and no mac filter
```{r}
#setwd to admixture directory run on the cluster
setwd("~/Desktop/cali.zosterops.rad/admixture/all.samps/")
#read in log error values to determine optimal K
log<-read.table("log.errors.txt")[,c(3:4)]
#use double backslash to interpret the opening parentheses literally in the regular expression
log$V3<-gsub("\\(K=", "", log$V3)
log$V3<-gsub("):", "", log$V3)
#interpret K values as numerical
log$V3<-as.numeric(log$V3)
#rename columns
colnames(log)<-c("Kvalue","cross.validation.error")
#make plot showing the cross validation error across K values 1:10
ggplot(data=log, aes(x=Kvalue, y=cross.validation.error, group=1)) +
  geom_line(linetype = "dashed")+
  geom_point()+
  ylab("cross-validation error")+
  xlab("K")+
  scale_x_continuous(breaks = c(1:10))+
  theme_classic()
#read in input file in order to get list of input samples in order
samps<-read.table("binary_fileset.fam")[,1]
#reorder sampling df to match order of the plot
sample.info<-sample.info[match(samps, sample.info$ID),]
sample.info$ID == samps
#read in all ten runs and save each dataframe in a list
runs<-list()
#read in log files
for (i in 1:10){
  runs[[i]]<-read.table(paste0("binary_fileset.", i, ".Q"))
}
par(mfrow=c(1,1))
#plot each run
for (i in 1:5){
barplot(t(as.matrix(runs[[i]])), col=rainbow(i), ylab="Ancestry", border="black")
}
for (i in 6:10){
barplot(t(as.matrix(runs[[i]])), col=rainbow(i), ylab="Ancestry", border="black")
}

#show sample order
samps
#rename rows in sampling column
rownames(sample.info)<-1:nrow(sample.info)
#index out each species to reorder
orderbyspecies<-c(as.numeric(rownames(sample.info[sample.info$Species == "everetti",])),
  as.numeric(rownames(sample.info[sample.info$Species == "nigrorum",])),
  as.numeric(rownames(sample.info[sample.info$Species == "palpebrosus",])),
  as.numeric(rownames(sample.info[sample.info$Species == "erythropleurus",])),
  as.numeric(rownames(sample.info[sample.info$Species == "simplex",])),
  as.numeric(rownames(sample.info[sample.info$Species == "japonicus",]))
  )

#reorder sampling df
samps.info<-sample.info[orderbyspecies,]

#make df of q values by sample
df<-cbind(samps.info[,c(1,6,8)],runs[[6]][orderbyspecies,])
rownames(df)<-c(1:nrow(df))

#reorder runs
for(i in 1:10){runs[[i]]<-t(as.matrix(runs[[i]]))[,orderbyspecies]}

#plot reordered barplot of optimal K value
barplot(runs[[6]], col=c("#882255","#332288","#DDCC77","#88CCEE","#CC6677","grey"), ylab="Ancestry", border="black")

#reorder one final time to clean it up slightly more
barplot(runs[[6]][,c(1:69,120:124,70:86,91:95,110:116,87:90,96:109,117:119)], col=c("#882255","#332288","#DDCC77","#88CCEE","#CC6677","grey"), ylab="Ancestry", border="black")

#save barplot
#pdf("~/Desktop/cali.zosterops.rad/admixture.all.pdf", width = 9, height=3.5)
#barplot(runs[[6]][,c(1:69,120:124,70:86,91:95,110:116,87:90,96:109,117:119)], col=c("#882255","#332288","#DDCC77","#88CCEE","#CC6677","grey"), ylab="Ancestry", border="black", )
#dev.off()
```

### With MAC filter
```{r}
#setwd to admixture directory run on the cluster
setwd("~/Desktop/cali.zosterops.rad/admixture/mac2/")
#read in log error values to determine optimal K
log<-read.table("log.errors.txt")[,c(3:4)]
#use double backslash to interpret the opening parentheses literally in the regular expression
log$V3<-gsub("\\(K=", "", log$V3)
log$V3<-gsub("):", "", log$V3)
#interpret K values as numerical
log$V3<-as.numeric(log$V3)
#rename columns
colnames(log)<-c("Kvalue","cross.validation.error")
#make plot showing the cross validation error across K values 1:10
ggplot(data=log, aes(x=Kvalue, y=cross.validation.error, group=1)) +
  geom_line(linetype = "dashed")+
  geom_point()+
  ylab("cross-validation error")+
  xlab("K")+
  scale_x_continuous(breaks = c(1:10))+
  theme_classic()
#read in input file in order to get list of input samples in order
samps<-read.table("binary_fileset.fam")[,1]

#read in all ten runs and save each dataframe in a list
runs<-list()
#read in log files
for (i in 1:10){
  runs[[i]]<-read.table(paste0("binary_fileset.", i, ".Q"))
}
par(mfrow=c(1,1))
#plot each run
for (i in 1:5){
barplot(t(as.matrix(runs[[i]])), col=rainbow(i), ylab="Ancestry", border="black")
}
for (i in 6:10){
barplot(t(as.matrix(runs[[i]])), col=rainbow(i), ylab="Ancestry", border="black")
}

#reorder runs
for(i in 1:10){runs[[i]]<-t(as.matrix(runs[[i]]))[,orderbyspecies]}

#reorder one final time to clean it up slightly more
barplot(runs[[6]][,c(1:69,120:124,70:86,91:95,110:116,87:90,96:109,117:119)], col=c("#882255","#332288","#DDCC77","#88CCEE","#CC6677","grey"), ylab="Ancestry", border="black")


### MAC filter appears to make no difference, so we will just run with the full unlinked SNP dataset
```

### Run hierarchical subsets

Because *everetti* and *nigrorum* are not split when they are run as part of the entire dataset, we will isolate them out of the vcf and re-run them separately to show that they are cleanly two separate things that are just not being split due to hierarchical structure

```{r}
#see the samples in the vcf
colnames(vcfR@gt)
#isolate only everetti and nigrorum from the vcf
vcf.sub<-vcfR[,c(1,100,102,103,75,118:120)]
#check that worked properly
colnames(vcf.sub@gt)
#remove invariant sites
vcf.sub<-min_mac(vcf.sub, min.mac = 1)
#check how many SNPs remain
vcf.sub
#vcfR::write.vcf(vcf.sub, file="~/Desktop/cali.zosterops.rad/ev.ni.vcf.gz")
```

### Run this subset in a unique directory on the cluster
```{bash, eval=FALSE}
#!/bin/sh
#
#SBATCH --job-name=admixture.zost              # Job Name
#SBATCH --nodes=1             # 40 nodes
#SBATCH --ntasks-per-node=5               # 40 CPU allocation per Task
#SBATCH --partition=sixhour            # Name of the Slurm partition used
#SBATCH --chdir=/home/d669d153/work/zosterops.rad/admixture/ev.ni    # Set working d$
#SBATCH --mem-per-cpu=1gb            # memory requested
#SBATCH --time=200
#use plink to convert vcf directly to bed format:
/home/d669d153/work/plink --vcf /home/d669d153/work/zosterops.rad/admixture/mac2/ev.ni.vcf  --double-id --allow-extra-chr --make-bed --out binary_fileset
#fix chromosome names
cut -f2- binary_fileset.bim  > temp
awk 'BEGIN{FS=OFS="\t"}{print value 1 OFS $0}' temp > binary_fileset.bim
rm temp
#run admixture for a K of 1-10, using cross-validation, with 10 threads
for K in 1 2 3 4 5 6 7 8 9 10; 
do /home/d669d153/work/admixture_linux-1.3.0/admixture --cv -j5 -m EM binary_fileset.bed $K | tee log${K}.out;
done
#Which K iteration is optimal according to ADMIXTURE ?
grep -h CV log*.out > log.errors.txt
```

### Check out the subset results
```{r}
#setwd to admixture directory run on the cluster
setwd("~/Desktop/cali.zosterops.rad/admixture/ev.ni/")
#read in log error values to determine optimal K
log<-read.table("log.errors.txt")[,c(3:4)]
#use double backslash to interpret the opening parentheses literally in the regular expression
log$V3<-gsub("\\(K=", "", log$V3)
log$V3<-gsub("):", "", log$V3)
#interpret K values as numerical
log$V3<-as.numeric(log$V3)
#rename columns
colnames(log)<-c("Kvalue","cross.validation.error")
#make plot showing the cross validation error across K values 1:10
ggplot(data=log, aes(x=Kvalue, y=cross.validation.error, group=1)) +
  geom_line(linetype = "dashed")+
  geom_point()+
  ylab("cross-validation error")+
  xlab("K")+
  scale_x_continuous(breaks = c(1:10))+
  theme_classic()
#read in input file in order to get list of input samples in order
samps<-read.table("binary_fileset.fam")[,1]

#read in all ten runs and save each dataframe in a list
runs<-list()
#read in log files
for (i in 1:10){
  runs[[i]]<-read.table(paste0("binary_fileset.", i, ".Q"))
}
par(mfrow=c(1,1))
#plot each run
for (i in 1:5){
barplot(t(as.matrix(runs[[i]])), col=rainbow(i), ylab="Ancestry", border="black")
}
for (i in 6:10){
barplot(t(as.matrix(runs[[i]])), col=rainbow(i), ylab="Ancestry", border="black")
}

#plot with appropriate color code
barplot(t(as.matrix(runs[[2]])), col=c("#117733","#DDCC77"), ylab="Ancestry", border="black")

#save barplot
#pdf("~/Desktop/cali.zosterops.rad/ev.ni.admix.pdf", width = 5.5, height=3.5)
#barplot(t(as.matrix(runs[[2]])), col=c("#117733","#DDCC77"), ylab="Ancestry", border="black")
#dev.off()


```
